/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as UpgradesRouteImport } from './routes/upgrades'
import { Route as TradingRouteImport } from './routes/trading'
import { Route as ProfileRouteImport } from './routes/profile'
import { Route as LeaderboardsRouteImport } from './routes/leaderboards'
import { Route as IndexRouteImport } from './routes/index'

const UpgradesRoute = UpgradesRouteImport.update({
  id: '/upgrades',
  path: '/upgrades',
  getParentRoute: () => rootRouteImport,
} as any)
const TradingRoute = TradingRouteImport.update({
  id: '/trading',
  path: '/trading',
  getParentRoute: () => rootRouteImport,
} as any)
const ProfileRoute = ProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => rootRouteImport,
} as any)
const LeaderboardsRoute = LeaderboardsRouteImport.update({
  id: '/leaderboards',
  path: '/leaderboards',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/leaderboards': typeof LeaderboardsRoute
  '/profile': typeof ProfileRoute
  '/trading': typeof TradingRoute
  '/upgrades': typeof UpgradesRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/leaderboards': typeof LeaderboardsRoute
  '/profile': typeof ProfileRoute
  '/trading': typeof TradingRoute
  '/upgrades': typeof UpgradesRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/leaderboards': typeof LeaderboardsRoute
  '/profile': typeof ProfileRoute
  '/trading': typeof TradingRoute
  '/upgrades': typeof UpgradesRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/leaderboards' | '/profile' | '/trading' | '/upgrades'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/leaderboards' | '/profile' | '/trading' | '/upgrades'
  id: '__root__' | '/' | '/leaderboards' | '/profile' | '/trading' | '/upgrades'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LeaderboardsRoute: typeof LeaderboardsRoute
  ProfileRoute: typeof ProfileRoute
  TradingRoute: typeof TradingRoute
  UpgradesRoute: typeof UpgradesRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/upgrades': {
      id: '/upgrades'
      path: '/upgrades'
      fullPath: '/upgrades'
      preLoaderRoute: typeof UpgradesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/trading': {
      id: '/trading'
      path: '/trading'
      fullPath: '/trading'
      preLoaderRoute: typeof TradingRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/profile': {
      id: '/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/leaderboards': {
      id: '/leaderboards'
      path: '/leaderboards'
      fullPath: '/leaderboards'
      preLoaderRoute: typeof LeaderboardsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LeaderboardsRoute: LeaderboardsRoute,
  ProfileRoute: ProfileRoute,
  TradingRoute: TradingRoute,
  UpgradesRoute: UpgradesRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
