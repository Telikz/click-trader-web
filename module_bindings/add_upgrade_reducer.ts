// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  type BinaryReader,
  type BinaryWriter,
  CallReducerFlags,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  DbContext,
  deepEqual,
  ErrorContextInterface,
  Event,
  EventContextInterface,
  Identity,
  ProductType,
  ProductTypeElement,
  ReducerEventContextInterface,
  SubscriptionBuilderImpl,
  SubscriptionEventContextInterface,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
} from '@clockworklabs/spacetimedb-sdk';

export type AddUpgrade = {
  identifier: string;
  title: string;
  description: string;
  level: number;
  cost: bigint;
  passiveIncomeBonus: bigint | undefined;
  clickPowerBonus: bigint | undefined;
  clickTimerBonus: bigint | undefined;
};

/**
 * A namespace for generated helper functions.
 */
export namespace AddUpgrade {
  /**
   * A function which returns this type represented as an AlgebraicType.
   * This function is derived from the AlgebraicType used to generate this type.
   */
  export function getTypeScriptAlgebraicType(): AlgebraicType {
    return AlgebraicType.createProductType([
      new ProductTypeElement('identifier', AlgebraicType.createStringType()),
      new ProductTypeElement('title', AlgebraicType.createStringType()),
      new ProductTypeElement('description', AlgebraicType.createStringType()),
      new ProductTypeElement('level', AlgebraicType.createU8Type()),
      new ProductTypeElement('cost', AlgebraicType.createU128Type()),
      new ProductTypeElement(
        'passiveIncomeBonus',
        AlgebraicType.createOptionType(AlgebraicType.createU128Type())
      ),
      new ProductTypeElement(
        'clickPowerBonus',
        AlgebraicType.createOptionType(AlgebraicType.createU128Type())
      ),
      new ProductTypeElement(
        'clickTimerBonus',
        AlgebraicType.createOptionType(AlgebraicType.createU64Type())
      ),
    ]);
  }

  export function serialize(writer: BinaryWriter, value: AddUpgrade): void {
    AddUpgrade.getTypeScriptAlgebraicType().serialize(writer, value);
  }

  export function deserialize(reader: BinaryReader): AddUpgrade {
    return AddUpgrade.getTypeScriptAlgebraicType().deserialize(reader);
  }
}
