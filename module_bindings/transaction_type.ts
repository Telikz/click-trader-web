// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  type BinaryReader,
  type BinaryWriter,
  CallReducerFlags,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  DbContext,
  deepEqual,
  ErrorContextInterface,
  Event,
  EventContextInterface,
  type Identity,
  ProductType,
  ProductTypeElement,
  ReducerEventContextInterface,
  SubscriptionBuilderImpl,
  SubscriptionEventContextInterface,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  type Timestamp,
} from '@clockworklabs/spacetimedb-sdk';
import { TransactionStatus as __TransactionStatus } from './transaction_status_type';
import { TransactionType as __TransactionType } from './transaction_type_type';

export type Transaction = {
  id: number;
  sender: Identity;
  stockId: number;
  amount: bigint;
  txType: __TransactionType;
  status: __TransactionStatus;
  timestamp: Timestamp;
};

/**
 * A namespace for generated helper functions.
 */
export namespace Transaction {
  /**
   * A function which returns this type represented as an AlgebraicType.
   * This function is derived from the AlgebraicType used to generate this type.
   */
  export function getTypeScriptAlgebraicType(): AlgebraicType {
    return AlgebraicType.createProductType([
      new ProductTypeElement('id', AlgebraicType.createU16Type()),
      new ProductTypeElement('sender', AlgebraicType.createIdentityType()),
      new ProductTypeElement('stockId', AlgebraicType.createU16Type()),
      new ProductTypeElement('amount', AlgebraicType.createU64Type()),
      new ProductTypeElement(
        'txType',
        __TransactionType.getTypeScriptAlgebraicType()
      ),
      new ProductTypeElement(
        'status',
        __TransactionStatus.getTypeScriptAlgebraicType()
      ),
      new ProductTypeElement('timestamp', AlgebraicType.createTimestampType()),
    ]);
  }

  export function serialize(writer: BinaryWriter, value: Transaction): void {
    Transaction.getTypeScriptAlgebraicType().serialize(writer, value);
  }

  export function deserialize(reader: BinaryReader): Transaction {
    return Transaction.getTypeScriptAlgebraicType().deserialize(reader);
  }
}
