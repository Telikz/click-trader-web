// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  CallReducerFlags,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  DbContext,
  ErrorContextInterface,
  Event,
  EventContextInterface,
  Identity,
  ProductType,
  ProductTypeElement,
  ReducerEventContextInterface,
  SubscriptionBuilderImpl,
  SubscriptionEventContextInterface,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
} from "@clockworklabs/spacetimedb-sdk";
export type Stock = {
  id: number,
  name: string,
  description: string,
  pricePerShare: bigint,
  totalShares: bigint,
  availableShares: bigint,
  lastPrice: bigint,
  momentum: number,
  volatility: number,
  recentBuys: bigint,
  recentSells: bigint,
  trendingEvent: string | undefined,
};

/**
 * A namespace for generated helper functions.
 */
export namespace Stock {
  /**
  * A function which returns this type represented as an AlgebraicType.
  * This function is derived from the AlgebraicType used to generate this type.
  */
  export function getTypeScriptAlgebraicType(): AlgebraicType {
    return AlgebraicType.createProductType([
      new ProductTypeElement("id", AlgebraicType.createU16Type()),
      new ProductTypeElement("name", AlgebraicType.createStringType()),
      new ProductTypeElement("description", AlgebraicType.createStringType()),
      new ProductTypeElement("pricePerShare", AlgebraicType.createU128Type()),
      new ProductTypeElement("totalShares", AlgebraicType.createU64Type()),
      new ProductTypeElement("availableShares", AlgebraicType.createU64Type()),
      new ProductTypeElement("lastPrice", AlgebraicType.createU128Type()),
      new ProductTypeElement("momentum", AlgebraicType.createI32Type()),
      new ProductTypeElement("volatility", AlgebraicType.createU8Type()),
      new ProductTypeElement("recentBuys", AlgebraicType.createU64Type()),
      new ProductTypeElement("recentSells", AlgebraicType.createU64Type()),
      new ProductTypeElement("trendingEvent", AlgebraicType.createOptionType(AlgebraicType.createStringType())),
    ]);
  }

  export function serialize(writer: BinaryWriter, value: Stock): void {
    Stock.getTypeScriptAlgebraicType().serialize(writer, value);
  }

  export function deserialize(reader: BinaryReader): Stock {
    return Stock.getTypeScriptAlgebraicType().deserialize(reader);
  }

}


